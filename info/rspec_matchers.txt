expect(actual_object).to eql(expected_object)
eql - matcher

require 'rspec'
include RSpec::Matchers

a = 1
b = 2
expect(a).to eql b

Matchers:

Equality:
expect(a).to be == b             # passes if a == b
expect(a).to eql == b            # passes if a.eql? (b)
expect(a).to equal == b          # passes if a.equal? (b)

expect('string').to equal('string') # => false
expect(:string).to equal(:string)   # => true

Comparison:
expect(9).to be > 6
expect(3).to be <= 3
expect(1).to be < 6

Be:
expect(a).to be_truthy            # passes id obj is truthy (not nil or false)
expect(a).to be_true	          # passes if obj is true
expect(a).to be_falsey            # passes id obj is false (nil or false)
expect(a).to be_false	          # passes if obj is false
expect(a).to be_nil               # passes id obj is nil
expect(a).to be		          # passes id obj is truthy (not nil or false)\

Type:
expect(a).to be_an_instance_of(String)
expect(a).to be_an_kind_of(Object)
expect(a).to be_an(Object)

Include:
expect("a string").to include("a")	# string
expect([1, 2]).to include(1)		# array

Start/end with:
 
# string:
expect("this string").to start_with("this")
expect("this string").to end_with("string")
# array:
expect([0, 1, 2]).to start_with(0, 1)
expect([0, 1, 2]).to end_with(1, 2)

Exist:
expect(a).to exist			# passes if a.exist? or obj.exists?

Match:					# for regexp
expect("a string".to match(/str/)	# passes
expect(/foo/).to match("drinks")	# fails


Predicate matchers part1:
Ruby has methods with'?' in the its name end:

7.zero?
[].empty?
date.monday?
element.visible?

{a:1, b:2}.has_key?(:a)


Predicate matchers part2:
RSpec Expectations has alghorithm to create matchers using these methods on the fly...

expect(number).to be_zero
expect(array).to be_empty
expect(date).to be_monday
expect(hash).to have_key(:a)


Predicate matchers part3:
class Car
	attr_accessor :drive_type

	def front_wheel_driven?
		@drive_type == :front
	end
end

my_car = Car.new
my_car.drive_type = :front
expect(my_car).to be_front_wheel_driven

Collection mathcers: contain/match_array

# Aliases:
	contain_exactly and match_array

expect([1,2,3]).to contain_exactly(2,3,1) 	# pass
expect([:a, :b, :c]).to match_array(:a, :c) 	# fail


Collection matches: 'all'
expect([1,3,5]).to all( be_odd )
expect([1,3,5]).to all( be_an(Integer) )
expect([1,3,5]).to all( be < 10 )
expect([1,3,4]).to all( be_odd )		# fails


Be_within matcher:
# allowable error
expect(number).to be_within(0.05).of(25)


Respond_to matcher:
# verify whether object can call some method
expect(object).to respond_to(:my_method)

Chaining
Bad:
	expect(alphabet).to start_witn("a")
	expect(alphabet).to end_witn("z")
Good:
	expect(alphabet).to start_with("a").and end_with("z")


Change matcher:
Note that expect() can accept a code block as an argument:

class Counter
	def self.increment
		@count += 1
	end
	def self.count
		@count
	end
end

expect { Counter.increment }.to change.{Counter.count}.from(0).to(1)
expect { Counter.increment }.to change.{Counter.count}.by(1)





